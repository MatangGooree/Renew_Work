{"ast":null,"code":"import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ScheduleTable(_ref){let{scheduleData}=_ref;// 1. scheduleData가 객체이므로, 내부 키로 존재하는지 확인합니다.\nif(!scheduleData||!scheduleData.DayInfo||!scheduleData.ScheduleInfo){return null;// 또는 <p>Loading...</p>\n}return/*#__PURE__*/_jsx(\"div\",{className:\"overflow-x-auto bg-white rounded-lg shadow\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"min-w-full divide-y divide-gray-200 border-collapse\",children:[/*#__PURE__*/_jsxs(\"thead\",{className:\"bg-gray-100\",children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{rowSpan:\"2\",className:\"sticky left-0 bg-gray-300 px-4 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider z-20 align-middle border-b border-gray-200\",children:\"\\uADFC\\uBB34\\uC790\"}),scheduleData.DayInfo.map((_,index)=>/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-2 text-center text-xs font-bold uppercase tracking-wider transition-colors duration-200\",children:index+1},\"date-\".concat(index)))]}),/*#__PURE__*/_jsx(\"tr\",{children:scheduleData.DayInfo.map((_ref2,index)=>{let{dayString,isWeekend}=_ref2;return/*#__PURE__*/_jsx(\"th\",{className:\"px-4 py-2 text-center text-xs font-bold uppercase tracking-wider border-b border-gray-200 transition-colors duration-200 \".concat(isWeekend?'text-red-600':'text-gray-600'),children:dayString},\"day-\".concat(index));})})]}),/*#__PURE__*/_jsx(\"tbody\",{className:\"bg-white \",children:Object.values(scheduleData.ScheduleInfo).map((item,workerIndex)=>{return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"sticky left-0 bg-gray-200 px-4 py-3 whitespace-nowrap text-sm font-semibold text-gray-900 z-10 border-r\",children:item.worker.name}),item.schedule.map((shift,dayIndex)=>{// 5. isWeekend 정보는 DayInfo 배열에서 가져와야 합니다.\nconst dayInfo=scheduleData.DayInfo[dayIndex];const isWeekend=dayInfo?dayInfo.isWeekend:false;const isHoliday=dayInfo?dayInfo.isHoliday:false;return/*#__PURE__*/_jsx(\"td\",{className:\"border-b\",children:/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-full flex items-center justify-center py-3 text-sm \".concat(isWeekend||isHoliday?'bg-red-50 text-red-700':'bg-white text-gray-700'),children:shift})},\"cell-\".concat(workerIndex,\"-\").concat(dayIndex));})]},\"worker-\".concat(workerIndex));})})]})});}export default ScheduleTable;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","ScheduleTable","_ref","scheduleData","DayInfo","ScheduleInfo","className","children","rowSpan","map","_","index","concat","_ref2","dayString","isWeekend","Object","values","item","workerIndex","worker","name","schedule","shift","dayIndex","dayInfo","isHoliday"],"sources":["/Users/HJ/Desktop/projectes/Renew_schedule/renew_schdule/client/src/Components/ScheduleTable.jsx"],"sourcesContent":["import React from 'react'\n\nfunction ScheduleTable({ scheduleData }) {\n  // 1. scheduleData가 객체이므로, 내부 키로 존재하는지 확인합니다.\n  if (!scheduleData || !scheduleData.DayInfo || !scheduleData.ScheduleInfo) {\n    return null // 또는 <p>Loading...</p>\n  }\n\n  return (\n    <div className='overflow-x-auto bg-white rounded-lg shadow'>\n      <table className='min-w-full divide-y divide-gray-200 border-collapse'>\n        <thead className='bg-gray-100'>\n          <tr>\n            {/* 근무자 (고정 헤더) */}\n            <th\n              rowSpan='2'\n              className='sticky left-0 bg-gray-300 px-4 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider z-20 align-middle border-b border-gray-200'\n            >\n              근무자\n            </th>\n\n            {/* 2. 날짜(숫자) 렌더링 (map 함수 수정) */}\n            {scheduleData.DayInfo.map((_, index) => (\n              <th\n                key={`date-${index}`}\n                className={`px-4 py-2 text-center text-xs font-bold uppercase tracking-wider transition-colors duration-200`}\n              >\n                {index + 1}\n              </th>\n            ))}\n          </tr>\n          <tr>\n            {/* 요일(문자) 렌더링 (이 부분은 거의 정확했습니다) */}\n            {scheduleData.DayInfo.map(({ dayString, isWeekend }, index) => (\n              <th\n                key={`day-${index}`}\n                className={`px-4 py-2 text-center text-xs font-bold uppercase tracking-wider border-b border-gray-200 transition-colors duration-200 ${\n                  isWeekend ? 'text-red-600' : 'text-gray-600'\n                }`}\n              >\n                {dayString}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody className='bg-white '>\n          {/* 3. ScheduleInfo가 객체이므로 Object.values()로 순회 */}\n          {Object.values(scheduleData.ScheduleInfo).map((item, workerIndex) => {\n            return (\n              <tr key={`worker-${workerIndex}`}>\n                {/* 근무자 이름 (고정 셀) */}\n                <td className='sticky left-0 bg-gray-200 px-4 py-3 whitespace-nowrap text-sm font-semibold text-gray-900 z-10 border-r'>\n                  {item.worker.name}\n                </td>\n\n                {/* 4. 각 근무자의 일별 스케줄 순회 */}\n                {item.schedule.map((shift, dayIndex) => {\n                  // 5. isWeekend 정보는 DayInfo 배열에서 가져와야 합니다.\n                  const dayInfo = scheduleData.DayInfo[dayIndex]\n                  const isWeekend = dayInfo ? dayInfo.isWeekend : false\n                  const isHoliday = dayInfo ? dayInfo.isHoliday : false\n\n                  return (\n                    <td\n                      key={`cell-${workerIndex}-${dayIndex}`}\n                      className='border-b'\n                    >\n                      <div\n                        className={`w-full h-full flex items-center justify-center py-3 text-sm ${\n                          isWeekend || isHoliday\n                            ? 'bg-red-50 text-red-700'\n                            : 'bg-white text-gray-700'\n                        }`}\n                      >\n                        {shift}\n                      </div>\n                    </td>\n                  )\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default ScheduleTable\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEzB,QAAS,CAAAC,aAAaA,CAAAC,IAAA,CAAmB,IAAlB,CAAEC,YAAa,CAAC,CAAAD,IAAA,CACrC;AACA,GAAI,CAACC,YAAY,EAAI,CAACA,YAAY,CAACC,OAAO,EAAI,CAACD,YAAY,CAACE,YAAY,CAAE,CACxE,MAAO,KAAI,CAAC;AACd,CAEA,mBACEP,IAAA,QAAKQ,SAAS,CAAC,4CAA4C,CAAAC,QAAA,cACzDP,KAAA,UAAOM,SAAS,CAAC,qDAAqD,CAAAC,QAAA,eACpEP,KAAA,UAAOM,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC5BP,KAAA,OAAAO,QAAA,eAEET,IAAA,OACEU,OAAO,CAAC,GAAG,CACXF,SAAS,CAAC,mJAAmJ,CAAAC,QAAA,CAC9J,oBAED,CAAI,CAAC,CAGJJ,YAAY,CAACC,OAAO,CAACK,GAAG,CAAC,CAACC,CAAC,CAAEC,KAAK,gBACjCb,IAAA,OAEEQ,SAAS,kGAAoG,CAAAC,QAAA,CAE5GI,KAAK,CAAG,CAAC,UAAAC,MAAA,CAHGD,KAAK,CAIhB,CACL,CAAC,EACA,CAAC,cACLb,IAAA,OAAAS,QAAA,CAEGJ,YAAY,CAACC,OAAO,CAACK,GAAG,CAAC,CAAAI,KAAA,CAA2BF,KAAK,OAA/B,CAAEG,SAAS,CAAEC,SAAU,CAAC,CAAAF,KAAA,oBACjDf,IAAA,OAEEQ,SAAS,6HAAAM,MAAA,CACPG,SAAS,CAAG,cAAc,CAAG,eAAe,CAC3C,CAAAR,QAAA,CAEFO,SAAS,SAAAF,MAAA,CALED,KAAK,CAMf,CAAC,EACN,CAAC,CACA,CAAC,EACA,CAAC,cACRb,IAAA,UAAOQ,SAAS,CAAC,WAAW,CAAAC,QAAA,CAEzBS,MAAM,CAACC,MAAM,CAACd,YAAY,CAACE,YAAY,CAAC,CAACI,GAAG,CAAC,CAACS,IAAI,CAAEC,WAAW,GAAK,CACnE,mBACEnB,KAAA,OAAAO,QAAA,eAEET,IAAA,OAAIQ,SAAS,CAAC,yGAAyG,CAAAC,QAAA,CACpHW,IAAI,CAACE,MAAM,CAACC,IAAI,CACf,CAAC,CAGJH,IAAI,CAACI,QAAQ,CAACb,GAAG,CAAC,CAACc,KAAK,CAAEC,QAAQ,GAAK,CACtC;AACA,KAAM,CAAAC,OAAO,CAAGtB,YAAY,CAACC,OAAO,CAACoB,QAAQ,CAAC,CAC9C,KAAM,CAAAT,SAAS,CAAGU,OAAO,CAAGA,OAAO,CAACV,SAAS,CAAG,KAAK,CACrD,KAAM,CAAAW,SAAS,CAAGD,OAAO,CAAGA,OAAO,CAACC,SAAS,CAAG,KAAK,CAErD,mBACE5B,IAAA,OAEEQ,SAAS,CAAC,UAAU,CAAAC,QAAA,cAEpBT,IAAA,QACEQ,SAAS,gEAAAM,MAAA,CACPG,SAAS,EAAIW,SAAS,CAClB,wBAAwB,CACxB,wBAAwB,CAC3B,CAAAnB,QAAA,CAEFgB,KAAK,CACH,CAAC,UAAAX,MAAA,CAXOO,WAAW,MAAAP,MAAA,CAAIY,QAAQ,CAYlC,CAAC,CAET,CAAC,CAAC,aAAAZ,MAAA,CA7BeO,WAAW,CA8B1B,CAAC,CAET,CAAC,CAAC,CACG,CAAC,EACH,CAAC,CACL,CAAC,CAEV,CAEA,cAAe,CAAAlB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
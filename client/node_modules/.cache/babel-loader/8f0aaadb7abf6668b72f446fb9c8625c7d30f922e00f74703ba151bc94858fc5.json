{"ast":null,"code":"//년, 월 입력 시 달력 출력\nasync function GetCalData(currentYear,currentMonth){const today=new Date();const isCurrentMonthView=today.getFullYear()===currentYear&&today.getMonth()===currentMonth;const todaysDate=isCurrentMonthView?today.getDate():null;const daysInMonth=new Date(currentYear,currentMonth+1,0).getDate();const dayLabels=['일','월','화','수','목','금','토'];const Anniversaries=await getAnniData(currentYear,currentMonth);return Array.from({length:daysInMonth},(_,i)=>{const date=i+1;const dayOfWeek=new Date(currentYear,currentMonth,date).getDay();// 0: Sun, 6: Sat\nconst dailyAnniversaries=Anniversaries.filter(anni=>{return parseInt(anni.locdate)===date;});return{date,dayLabel:dayLabels[dayOfWeek],isWeekend:dayOfWeek===0||dayOfWeek===6,isToday:date===todaysDate,Anniversary:dailyAnniversaries};});}//공휴일 불러오기\nasync function getAnniData(currentYear,currentMonth){try{var _result$data,_result$data$response,_result$data$response2,_result$data$response3;console.log(currentYear,currentMonth);const response=await fetch(\"/api/anniversary?year=\".concat(currentYear,\"&month=\").concat(currentMonth));console.log(response);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log(result);// API 응답 구조에 따라 안전하게 데이터 접근 및 상태 업데이트\nconst items=result===null||result===void 0?void 0:(_result$data=result.data)===null||_result$data===void 0?void 0:(_result$data$response=_result$data.response)===null||_result$data$response===void 0?void 0:(_result$data$response2=_result$data$response.body)===null||_result$data$response2===void 0?void 0:(_result$data$response3=_result$data$response2.items)===null||_result$data$response3===void 0?void 0:_result$data$response3.item;console.log(items);if(Array.isArray(items)){return items;}else if(items){return[items];}else{// 데이터가 없거나 예상치 못한 구조인 경우\nreturn[];}}catch(error){console.error('기념일 데이터를 가져오는 중 오류 발생:',error);return[];}}export{getAnniData,GetCalData};","map":{"version":3,"names":["GetCalData","currentYear","currentMonth","today","Date","isCurrentMonthView","getFullYear","getMonth","todaysDate","getDate","daysInMonth","dayLabels","Anniversaries","getAnniData","Array","from","length","_","i","date","dayOfWeek","getDay","dailyAnniversaries","filter","anni","parseInt","locdate","dayLabel","isWeekend","isToday","Anniversary","_result$data","_result$data$response","_result$data$response2","_result$data$response3","console","log","response","fetch","concat","ok","Error","status","result","json","items","data","body","item","isArray","error"],"sources":["/Users/HJ/Desktop/projectes/Renew_schedule/renew_schdule/client/src/Utils/GetCalender.js"],"sourcesContent":["//년, 월 입력 시 달력 출력\n\nasync function GetCalData(currentYear, currentMonth) {\n  const today = new Date();\n  const isCurrentMonthView = today.getFullYear() === currentYear && today.getMonth() === currentMonth;\n  const todaysDate = isCurrentMonthView ? today.getDate() : null;\n\n  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\n  const dayLabels = ['일', '월', '화', '수', '목', '금', '토'];\n  const Anniversaries = await getAnniData(currentYear, currentMonth);\n\n  return Array.from({ length: daysInMonth }, (_, i) => {\n    const date = i + 1;\n    const dayOfWeek = new Date(currentYear, currentMonth, date).getDay(); // 0: Sun, 6: Sat\n\n    const dailyAnniversaries = Anniversaries.filter((anni) => {\n      return parseInt(anni.locdate) === date;\n    });\n    return {\n      date,\n      dayLabel: dayLabels[dayOfWeek],\n      isWeekend: dayOfWeek === 0 || dayOfWeek === 6,\n      isToday: date === todaysDate,\n      Anniversary: dailyAnniversaries,\n    };\n  });\n}\n\n//공휴일 불러오기\nasync function getAnniData(currentYear, currentMonth) {\n  try {\n    console.log(currentYear, currentMonth);\n    const response = await fetch(`/api/anniversary?year=${currentYear}&month=${currentMonth}`);\n    console.log(response);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log(result);\n    // API 응답 구조에 따라 안전하게 데이터 접근 및 상태 업데이트\n    const items = result?.data?.response?.body?.items?.item;\n    console.log(items);\n    if (Array.isArray(items)) {\n      return items;\n    } else if (items) {\n      return [items];\n    } else {\n      // 데이터가 없거나 예상치 못한 구조인 경우\n      return [];\n    }\n  } catch (error) {\n    console.error('기념일 데이터를 가져오는 중 오류 발생:', error);\n    return [];\n  }\n}\n\nexport { getAnniData, GetCalData };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
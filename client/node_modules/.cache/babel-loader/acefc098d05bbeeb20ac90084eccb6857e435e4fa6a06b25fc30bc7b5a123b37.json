{"ast":null,"code":"//년, 월 입력 시 달력 출력\n\nasync function GetCalData(currentYear, currentMonth) {\n  const today = new Date();\n  const isCurrentMonthView = today.getFullYear() === currentYear && today.getMonth() === currentMonth;\n  const todaysDate = isCurrentMonthView ? today.getDate() : null;\n  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\n  const dayLabels = ['일', '월', '화', '수', '목', '금', '토'];\n  const Anniversaries = await getAnniData(currentYear, currentMonth);\n  return Array.from({\n    length: daysInMonth\n  }, (_, i) => {\n    const date = i + 1;\n    const dayOfWeek = new Date(currentYear, currentMonth, date).getDay(); // 0: Sun, 6: Sat\n\n    const dailyAnniversaries = Anniversaries.filter(anni => {\n      return parseInt(anni.locdate) === date;\n    });\n    return {\n      date,\n      dayLabel: dayLabels[dayOfWeek],\n      isWeekend: dayOfWeek === 0 || dayOfWeek === 6,\n      isToday: date === todaysDate,\n      Anniversary: dailyAnniversaries\n    };\n  });\n}\n\n//공휴일 불러오기\n_c = GetCalData;\nasync function getAnniData(currentYear, currentMonth) {\n  try {\n    var _result$data, _result$data$response, _result$data$response2, _result$data$response3;\n    const response = await fetch(`/api/anniversary?year=${currentYear}&month=${currentMonth}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const result = await response.json();\n    // API 응답 구조에 따라 안전하게 데이터 접근 및 상태 업데이트\n    const items = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$response = _result$data.response) === null || _result$data$response === void 0 ? void 0 : (_result$data$response2 = _result$data$response.body) === null || _result$data$response2 === void 0 ? void 0 : (_result$data$response3 = _result$data$response2.items) === null || _result$data$response3 === void 0 ? void 0 : _result$data$response3.item;\n    if (Array.isArray(items)) {\n      return items;\n    } else if (items) {\n      return [items];\n    } else {\n      // 데이터가 없거나 예상치 못한 구조인 경우\n      return [];\n    }\n  } catch (error) {\n    console.error('기념일 데이터를 가져오는 중 오류 발생:', error);\n    return [];\n  }\n}\nexport { getAnniData, GetCalData };\nvar _c;\n$RefreshReg$(_c, \"GetCalData\");","map":{"version":3,"names":["GetCalData","currentYear","currentMonth","today","Date","isCurrentMonthView","getFullYear","getMonth","todaysDate","getDate","daysInMonth","dayLabels","Anniversaries","getAnniData","Array","from","length","_","i","date","dayOfWeek","getDay","dailyAnniversaries","filter","anni","parseInt","locdate","dayLabel","isWeekend","isToday","Anniversary","_c","_result$data","_result$data$response","_result$data$response2","_result$data$response3","response","fetch","ok","Error","status","result","json","items","data","body","item","isArray","error","console","$RefreshReg$"],"sources":["/Users/HJ/Desktop/projectes/Renew_schedule/renew_schdule/client/src/Utils/GetCalender.js"],"sourcesContent":["//년, 월 입력 시 달력 출력\n\nasync function GetCalData(currentYear, currentMonth) {\n  const today = new Date();\n  const isCurrentMonthView = today.getFullYear() === currentYear && today.getMonth() === currentMonth;\n  const todaysDate = isCurrentMonthView ? today.getDate() : null;\n\n  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\n  const dayLabels = ['일', '월', '화', '수', '목', '금', '토'];\n  const Anniversaries = await getAnniData(currentYear, currentMonth);\n\n  return Array.from({ length: daysInMonth }, (_, i) => {\n    const date = i + 1;\n    const dayOfWeek = new Date(currentYear, currentMonth, date).getDay(); // 0: Sun, 6: Sat\n\n    const dailyAnniversaries = Anniversaries.filter((anni) => {\n      return parseInt(anni.locdate) === date;\n    });\n    return {\n      date,\n      dayLabel: dayLabels[dayOfWeek],\n      isWeekend: dayOfWeek === 0 || dayOfWeek === 6,\n      isToday: date === todaysDate,\n      Anniversary: dailyAnniversaries,\n    };\n  });\n}\n\n//공휴일 불러오기\nasync function getAnniData(currentYear, currentMonth) {\n  try {\n    const response = await fetch(`/api/anniversary?year=${currentYear}&month=${currentMonth}`);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const result = await response.json();\n    // API 응답 구조에 따라 안전하게 데이터 접근 및 상태 업데이트\n    const items = result?.data?.response?.body?.items?.item;\n\n    if (Array.isArray(items)) {\n      return items;\n    } else if (items) {\n      return [items];\n    } else {\n      // 데이터가 없거나 예상치 못한 구조인 경우\n      return [];\n    }\n  } catch (error) {\n    console.error('기념일 데이터를 가져오는 중 오류 발생:', error);\n    return [];\n  }\n}\n\nexport { getAnniData, GetCalData };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}